% asteroid_Part1;

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%% PART 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

   % % Run another ode45 sim, but this time using the perturbed initial condition 
   %  processNoise = zeros(3,1);
   %  [t_pert,x_pert] = ode45(@(t,x) satDynamicModel(t,x,[],processNoise),tspan,x0+x0_pert,OPTIONS);

% Initialize variables and matrices
% Process noise covariance matrix 
Q = [dt_int^3/3*eye(3)    dt_int^2/2*eye(3);...
     dt_int^2/2*eye(3)    dt_int*eye(3)];
% Initial Covariance matrix
P0 = 10000*eye(6);
% Measurement noise covariance matrix
R = diag([sigma_u^2 sigma_v^2]);


% NOTE: This is dupilcate code from asteroid_Part1 WHY: need to save the
% Fbar_k (I used a cell array) for use in the Linearized KF below FIX: just add the
% initialization of Fbar_k into line 165 of asteroid_Part1
Fbar_k = cell(length(tspan) - 1, 1);
for k = 1:length(tspan)-1    
    Abar_k = linearizedAmat(mu_A, x_nom(k, :)'); % CT
    Fbar_k{k} = linearizedFmat(dt_int, Abar_k);  % Save the matrix for this time step
end

% Containers 
x_bar_LKF = zeros(length(tspan), 6); 
P = zeros(6, 6, length(tspan));   
% Set initial conditions
x_bar_LKF(1, :) = xbar(1,:); % Replace 'initial_state' with your actual initial state
P(:, :, 1) = P0; % Use the provided initial covariance matrix P0

% Extract unique time steps
uniqueTimeSteps = unique(y_nom_tbl(:, 1));

% Linearized Kalman Filter 
for k = 1:length(tspan)-1  
    t_k = tspan(k); 
    % Time Update / Prediction Step occurs at every k 
    x_bar_LKF(k+1,:) = Fbar_k{k} * x_bar_LKF(k, :)';
    P(:, :, k+1) = Fbar_k{k} * P(:, :, k) * Fbar_k{k}' + Q;
    
    % The measurement update occurs at every 10th k 
    if mod(t_k,dt_obs) == 0 &&
        y_full_k = y_full((y_full(:,1)==t_k)~=0,:); 
        y_table_k = y_table((y_table(:,1)==t_k)~=0,:); 
        y_trunc_k = []; 
        for row = 1: size(y_table_k,1)
            lmkid = y_table_k(row,2);
            y_trunc_k =[y_trunc_k;...
                y_full_k((y_full_k(:,2) == lmkid),:)];   
        end 
        
        delta_y_k = y_table_k(:,3:4) - y_trunc_k(:,3:4); 
        delta_y_k_meta = [y_table_k(:,1:2) delta_y_k];  
        % Get rotation matrix R_CtoN
        R_CtoN_k = R_CtoN(:,:,(t_k/dt_obs)+1);
    
       % Get rotation matrix R_AtoN
        theta = w_A*t_k;
        R_AtoN_k = rotZ(theta);
        pos_lmks_N = R_AtoN_k*pos_lmks_A; 

        Hbar_k = linearizedCmat(f, R_CtoN_k, pos_lmks_N, delta_y_k_meta, x_nom_k);
        % 2 look at indices in t table, look at which LMs it saw 
        % 3 from the complete nominal state, truncate y_full (y_nom unfiltered) to match indices of y_table
        % 4 Generate the Hbar with the new truncated y_full (linearizedCMat) 
        
        % Compute Kalman gain 
        Big_R = eye(size(Hbar_k,1))*R(1,1); 
        Kkp1 = P(:, :, k+1) * Hbar_k' / (Hbar_k * P(:, :, k+1) * Hbar_k' + Big_R);
                
        % Measurement Update / Correction Step (on the tenth time)         
        delta_y_k = reshape(delta_y_k',[numel(delta_y_k),1]);
        x_bar_LKF(k+1,:) = x_bar_LKF(k+1,:)' + Kkp1 * (delta_y_k - Hbar_k*x_bar_LKF(k+1,:)'); % Update state estimate
        P(:, :, k+1) = (eye(6) - Kkp1 * Hbar_k) * P(:, :, k+1); % Update covariance matrix
        
    end 
end


